{
    "docs": [
        {
            "location": "/", 
            "text": "HexViewer\n\n\nA hex viewer and editor for Sublime Text.\n\n\n\n\nOverview\n\n\nHex Viewer is a plugin for Sublime Text that allows the toggling of a file into a hex viewing mode.  Hex Viewer also supports hex editing.\n\n\n\n\nFeatures\n\n\n\n\nView any file (that exist on disk) in a hex format showing both byte and ASCII representation.\n\n\nCommand to jump to a specific address.\n\n\nIn place editing of bytes or ASCII chars.\n\n\nHighlight selected byte \nand\n ascii code.\n\n\nInspection panel showing different integer representation at the cursor position.\n\n\nConfigurable display of byte grouping, bytes per line, endianness.\n\n\nExport hex view to a binary file.\n\n\nGet the checksum of a given file (various checksums are available).\n\n\nGenerate checksum/hash from input via panel or text selection.\n\n\nOptionally auto convert binary to hex view.", 
            "title": "About HexViewer"
        }, 
        {
            "location": "/#hexviewer", 
            "text": "A hex viewer and editor for Sublime Text.", 
            "title": "HexViewer"
        }, 
        {
            "location": "/#overview", 
            "text": "Hex Viewer is a plugin for Sublime Text that allows the toggling of a file into a hex viewing mode.  Hex Viewer also supports hex editing.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "View any file (that exist on disk) in a hex format showing both byte and ASCII representation.  Command to jump to a specific address.  In place editing of bytes or ASCII chars.  Highlight selected byte  and  ascii code.  Inspection panel showing different integer representation at the cursor position.  Configurable display of byte grouping, bytes per line, endianness.  Export hex view to a binary file.  Get the checksum of a given file (various checksums are available).  Generate checksum/hash from input via panel or text selection.  Optionally auto convert binary to hex view.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling HexViewer.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install HexViewer is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn sublime, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel.  It will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nHexViewer\n, when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install HexViewer for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/HexViewer.git HexViewer\n\n\n\n\n\n\n\n\n\n3 Restart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing HexViewer.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install HexViewer is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In sublime, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel.  It will show a list of installable plugins.    Start typing  HexViewer , when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install HexViewer for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/HexViewer.git HexViewer    3 Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguring and using HexViewer.\n\n\n\n\nCommands\n\n\nThere are 10 commands available via the command palette or by key-bindings.\n\n\n\n\nHex Viewer: Toggle Hex View\n\n\nHex Viewer: Show Hex Inspector\n\n\nHex Viewer: Toggle Endianness (Big|Little)\n\n\nHex Viewer: Set Bits Per Group\n\n\nHex Viewer: Set Bytes Per Line\n\n\nHex Viewer: Find By Address\n\n\nHex Viewer: Show Hex Edit Panel\n\n\nHex Viewer: Discard All Edits\n\n\nHex Viewer: Export Bin\n\n\nHex Viewer: Get Checksum\n\n\nHex Viewer: Generate Hash\n\n\n\n\nHex Viewer: Toggle Hex View\n\n\nToggle file in or out of hex view\n\n\nHex Viewer: Show Hex Inspector\n\n\nShow the Hex Inspector panel.  The Hex Inspector is a panel which shows the current selected byte as different unit types: byte (8 bit), short(signed 8 bit), word (16 bit), int (signed 16 bit), dword (double word 32 bit), longint (signed 32 bit), float (32 bit floating point), double (floating point 64 bit), and binary (8 bit binary).\n\n\nHex Viewer: Toggle Endiannes (Big|Little)\n\n\nToggle the parsing of bytes to big or little endian when showing unit types in Hex Inspector\n\n\nHex Viewer: Set Bits Per Group\n\n\nAllows selection from the quick panel the grouping of bytes by 8, 16, 32, 64, and 128 bits.  This will reload the file with this formatting.  All edits will be lost, so export your changes before you do this.\n\n\nHex Viewer: Set Bytes Per Line\n\n\nAllows selection form the quick panel the the number of bytes to be shown on a line: 8, 10, 16, 24, 32, 48, 64, 128, 256, 512.  If the selected value is not divisible by the \nbits per group\n, the closet number of bytes per line will be used.\n\n\nHex Viewer: Find By Address\n\n\nFind the byte at the specified address.  Input is received through the input panel.\n\n\nHex Viewer: Show Hex Edit Panel\n\n\nInvoking this command will take the currently selected bytes on a line and display them in an input panel.  They can then be modified and submitted to replace the original bytes.  Strings can also be used by using the \ns:\n prefix followed by the equivalent ASCII characters that are to replace the selected bytes.\n\n\nHex Viewer: Discard All Edits\n\n\nIf at any time you would like to discard all of the changes you have currently made to the hex view, you can invoke this command, and a clean hex view will be reloaded.\n\n\nHex Viewer: Export Bin\n\n\nThis command exports the current hex view to a binary file, and if the option is enabled, it will display the checksum of the newly generated binary file.\n\n\nHex Viewer: Run Checksum\n\n\nBy default, it opens up a quick panel with all available hashes that can be used as a checksum.  When an algorithm is selected, it is used to retrieve the checksum for the current file in hex view mode.\n\n\nHex Viewer: Generate Hash\n\n\nShows a quick panel allowing you to select the desired hash, and then shows an input panel that allows you to specify the string to be hashed. A panel is then displayed with your generated hash according to specifications.\n\n\nHex Viewer: Generate Hash from Selection\n\n\nAllows you to generate hashes from your current selection(s).  Multi-select regions\n content will be combined and evaluated together.  If a region contains newlines, they will be hashed as well.\n\n\nHex Viewer: Abort (Hex Conversion|Export|Checksum)\n\n\nAbort the given action.\n\n\nConfigurable settings\n\n\nSettings are configurable in the hex_viewer.sublime-settings file.\n\n\n\n\nconfigure byte highlight color, icon, and style\n\n\nconfigure edit highlight color, icon, and style\n\n\nset default bits per group\n\n\nset default bytes per line\n\n\ncustom font and font size\n\n\nwhether to auto show the Hex Inspector panel on hex view load\n\n\nwhether Hex Inspector is enabled at all\n\n\nhash algorithm to use when checksumming\n\n\nwhether to checksum on file export automatically\n\n\nenable/disable auto open of specified binary files", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuring and using HexViewer.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#commands", 
            "text": "There are 10 commands available via the command palette or by key-bindings.   Hex Viewer: Toggle Hex View  Hex Viewer: Show Hex Inspector  Hex Viewer: Toggle Endianness (Big|Little)  Hex Viewer: Set Bits Per Group  Hex Viewer: Set Bytes Per Line  Hex Viewer: Find By Address  Hex Viewer: Show Hex Edit Panel  Hex Viewer: Discard All Edits  Hex Viewer: Export Bin  Hex Viewer: Get Checksum  Hex Viewer: Generate Hash", 
            "title": "Commands"
        }, 
        {
            "location": "/usage/#hex-viewer-toggle-hex-view", 
            "text": "Toggle file in or out of hex view", 
            "title": "Hex Viewer: Toggle Hex View"
        }, 
        {
            "location": "/usage/#hex-viewer-show-hex-inspector", 
            "text": "Show the Hex Inspector panel.  The Hex Inspector is a panel which shows the current selected byte as different unit types: byte (8 bit), short(signed 8 bit), word (16 bit), int (signed 16 bit), dword (double word 32 bit), longint (signed 32 bit), float (32 bit floating point), double (floating point 64 bit), and binary (8 bit binary).", 
            "title": "Hex Viewer: Show Hex Inspector"
        }, 
        {
            "location": "/usage/#hex-viewer-toggle-endiannes-biglittle", 
            "text": "Toggle the parsing of bytes to big or little endian when showing unit types in Hex Inspector", 
            "title": "Hex Viewer: Toggle Endiannes (Big|Little)"
        }, 
        {
            "location": "/usage/#hex-viewer-set-bits-per-group", 
            "text": "Allows selection from the quick panel the grouping of bytes by 8, 16, 32, 64, and 128 bits.  This will reload the file with this formatting.  All edits will be lost, so export your changes before you do this.", 
            "title": "Hex Viewer: Set Bits Per Group"
        }, 
        {
            "location": "/usage/#hex-viewer-set-bytes-per-line", 
            "text": "Allows selection form the quick panel the the number of bytes to be shown on a line: 8, 10, 16, 24, 32, 48, 64, 128, 256, 512.  If the selected value is not divisible by the  bits per group , the closet number of bytes per line will be used.", 
            "title": "Hex Viewer: Set Bytes Per Line"
        }, 
        {
            "location": "/usage/#hex-viewer-find-by-address", 
            "text": "Find the byte at the specified address.  Input is received through the input panel.", 
            "title": "Hex Viewer: Find By Address"
        }, 
        {
            "location": "/usage/#hex-viewer-show-hex-edit-panel", 
            "text": "Invoking this command will take the currently selected bytes on a line and display them in an input panel.  They can then be modified and submitted to replace the original bytes.  Strings can also be used by using the  s:  prefix followed by the equivalent ASCII characters that are to replace the selected bytes.", 
            "title": "Hex Viewer: Show Hex Edit Panel"
        }, 
        {
            "location": "/usage/#hex-viewer-discard-all-edits", 
            "text": "If at any time you would like to discard all of the changes you have currently made to the hex view, you can invoke this command, and a clean hex view will be reloaded.", 
            "title": "Hex Viewer: Discard All Edits"
        }, 
        {
            "location": "/usage/#hex-viewer-export-bin", 
            "text": "This command exports the current hex view to a binary file, and if the option is enabled, it will display the checksum of the newly generated binary file.", 
            "title": "Hex Viewer: Export Bin"
        }, 
        {
            "location": "/usage/#hex-viewer-run-checksum", 
            "text": "By default, it opens up a quick panel with all available hashes that can be used as a checksum.  When an algorithm is selected, it is used to retrieve the checksum for the current file in hex view mode.", 
            "title": "Hex Viewer: Run Checksum"
        }, 
        {
            "location": "/usage/#hex-viewer-generate-hash", 
            "text": "Shows a quick panel allowing you to select the desired hash, and then shows an input panel that allows you to specify the string to be hashed. A panel is then displayed with your generated hash according to specifications.", 
            "title": "Hex Viewer: Generate Hash"
        }, 
        {
            "location": "/usage/#hex-viewer-generate-hash-from-selection", 
            "text": "Allows you to generate hashes from your current selection(s).  Multi-select regions  content will be combined and evaluated together.  If a region contains newlines, they will be hashed as well.", 
            "title": "Hex Viewer: Generate Hash from Selection"
        }, 
        {
            "location": "/usage/#hex-viewer-abort-hex-conversionexportchecksum", 
            "text": "Abort the given action.", 
            "title": "Hex Viewer: Abort (Hex Conversion|Export|Checksum)"
        }, 
        {
            "location": "/usage/#configurable-settings", 
            "text": "Settings are configurable in the hex_viewer.sublime-settings file.   configure byte highlight color, icon, and style  configure edit highlight color, icon, and style  set default bits per group  set default bytes per line  custom font and font size  whether to auto show the Hex Inspector panel on hex view load  whether Hex Inspector is enabled at all  hash algorithm to use when checksumming  whether to checksum on file export automatically  enable/disable auto open of specified binary files", 
            "title": "Configurable settings"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n=\nversion\nST3\n\n\nSupported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than \nST3\n will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull \nmust\n already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n and \nflake8_docstrings\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nI currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n.", 
            "title": "Contributing & Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing  Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2 = version ST3  Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than  ST3  will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull  must  already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.    ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8  and  flake8_docstrings .  These can be installed via:  pip install flake8\npip install flake8_docstrings  Linting is performed with the following command:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  I currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve .", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nHex Viewer is released under the MIT license.\n\n\nCopyright \n 2011 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Hex Viewer is released under the MIT license.  Copyright   2011 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}