{
    "docs": [
        {
            "location": "/", 
            "text": "HexViewer\n\n\nA hex viewer and editor for Sublime Text.\n\n\n\n\nOverview\n\n\nHex Viewer is a plugin for Sublime Text that allows the toggling of a file into a hex viewing mode.  Hex Viewer also supports hex editing.\n\n\n\n\nFeatures\n\n\n\n\nView any file (that exist on disk) in a hex format showing both byte and ASCII representation.\n\n\nCommand to jump to a specific address.\n\n\nIn place editing of bytes or ASCII chars.\n\n\nHighlight selected byte \nand\n ascii code.\n\n\nInspection panel showing different integer representation at the cursor position.\n\n\nConfigurable display of byte grouping, bytes per line, endianness.\n\n\nExport hex view to a binary file.\n\n\nGet the checksum of a given file (various checksums are available).\n\n\nGenerate checksum/hash from input via panel or text selection.\n\n\nOptionally auto convert binary to hex view.", 
            "title": "About HexViewer"
        }, 
        {
            "location": "/#hexviewer", 
            "text": "A hex viewer and editor for Sublime Text.", 
            "title": "HexViewer"
        }, 
        {
            "location": "/#overview", 
            "text": "Hex Viewer is a plugin for Sublime Text that allows the toggling of a file into a hex viewing mode.  Hex Viewer also supports hex editing.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "View any file (that exist on disk) in a hex format showing both byte and ASCII representation.  Command to jump to a specific address.  In place editing of bytes or ASCII chars.  Highlight selected byte  and  ascii code.  Inspection panel showing different integer representation at the cursor position.  Configurable display of byte grouping, bytes per line, endianness.  Export hex view to a binary file.  Get the checksum of a given file (various checksums are available).  Generate checksum/hash from input via panel or text selection.  Optionally auto convert binary to hex view.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling HexViewer.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install HexViewer is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel and start typing \nPackage Control: Install Package\n.  Select the command and it will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nHexViewer\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install HexViewer for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/HexViewer.git HexViewer\n\n\n\n\n\n\n\n\n\nRestart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing HexViewer.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install HexViewer is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel and start typing  Package Control: Install Package .  Select the command and it will show a list of installable plugins.    Start typing  HexViewer ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install HexViewer for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/HexViewer.git HexViewer    Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguring and using HexViewer.\n\n\n\n\nCommands\n\n\nThere are 10 commands available via the command palette or by key-bindings.\n\n\n\n\nHex Viewer: Toggle Hex View\n\n\nHex Viewer: Show Hex Inspector\n\n\nHex Viewer: Toggle Endianness (Big|Little)\n\n\nHex Viewer: Set Bits Per Group\n\n\nHex Viewer: Set Bytes Per Line\n\n\nHex Viewer: Go to Offset\n\n\nHex Viewer: Show Hex Edit Panel\n\n\nHex Viewer: Discard All Edits\n\n\nHex Viewer: Export Bin\n\n\nHex Viewer: Get Checksum\n\n\nHex Viewer: Generate Hash\n\n\n\n\nHex Viewer: Toggle Hex View\n\n\nToggles file in or out of hex view.\n\n\nHex Viewer: Reload Hex View\n\n\nReloads the current hex view.  All edits will be lost.\n\n\nHex Viewer: Show Hex Inspector\n\n\nShow the Hex Inspector panel.  The Hex Inspector is a panel which shows the current selected byte as different unit types.\n\n\n\n\n\n\n\n\nName\n\n\nSigned\n\n\nBits\n\n\n\n\n\n\n\n\n\n\nByte\n\n\nUnsigned\n\n\n8\n\n\n\n\n\n\nShort\n\n\nSigned\n\n\n8\n\n\n\n\n\n\nWord\n\n\nUnsigned\n\n\n16\n\n\n\n\n\n\nInt\n\n\nSigned\n\n\n16\n\n\n\n\n\n\nDword\n\n\nUnsigned\n\n\n32\n\n\n\n\n\n\nLongInt\n\n\nSigned\n\n\n32\n\n\n\n\n\n\nQword\n\n\nUnsinged\n\n\n64\n\n\n\n\n\n\nLongLongInt\n\n\nSigned\n\n\n64\n\n\n\n\n\n\nFloat\n\n\nSigned\n\n\n32\n\n\n\n\n\n\nDouble\n\n\nSigned\n\n\n64\n\n\n\n\n\n\nBinary\n\n\nNA\n\n\n8\n\n\n\n\n\n\n\n\nHex Viewer: Toggle Endiannes (Big|Little)\n\n\nToggles the parsing of bytes to big or little endian when showing unit types in Hex Inspector.\n\n\nHex Viewer: Set Bits Per Group\n\n\nAllows selection from the quick panel the grouping of bytes by 8, 16, 32, 64, and 128 bits.  This will reload the file with this formatting.  All edits will be lost, so export your changes before you do this.\n\n\nHex Viewer: Set Bytes Per Line\n\n\nAllows selection from the quick panel the number of bytes to be shown on a line (allowed options are defined in \nvalid_bytes_per_line\n).\n\n\nHex Viewer: Go to Offset\n\n\nMoves the cursor to the given offset (address).  Input is received through the input panel.\n\n\nHex Viewer: Show Hex Edit Panel\n\n\nInvoking this command will take the currently selected bytes on a line and display them in an input panel.  They can then be modified and submitted to replace the original bytes.  Strings can also be used by using the \ns:\n prefix followed by the equivalent ASCII characters that are to replace the selected bytes.\n\n\nHex Viewer: Discard All Edits\n\n\nIf at any time you would like to discard all of the changes you have currently made to the hex view, you can invoke this command and a clean hex view will be reloaded.\n\n\nHex Viewer: Export Bin\n\n\nExports the current hex view to a binary file.\n\n\nHex Viewer: Run Checksum\n\n\nBy default, it opens up a quick panel with all available hashes that can be used as a checksum.  When an algorithm is selected, it is used to retrieve the checksum for the current file in hex view mode.\n\n\nHex Viewer: Generate Hash\n\n\nShows a quick panel allowing you to select the desired hash, and then shows an input panel that allows you to specify the string to be hashed. A panel is then displayed with your generated hash according to the selected specifications.\n\n\nHex Viewer: Generate Hash from Selection\n\n\nAllows you to generate hashes from your current selection(s).  Multi-select regions\n content will be combined and evaluated together.  If a region contains newlines, they will be hashed as well.\n\n\nHex Viewer: Abort (Hex Conversion|Export|Checksum)\n\n\nAbort the given action.\n\n\nHex Viewer: Open in External Viewer\n\n\nOpens the current binary file in an external hex editor.\n\n\nConfigurable settings\n\n\nSettings are configurable in the \nhex_viewer.sublime-settings\n file.\n\n\ngroup_bytes_by_bits\n\n\nGroups together the bytes by the number of bits.  Valid numbers are must be divisible by bytes and currently go up to 128 bits.\n\n\n    \n// Group bytes together by bits\n\n    \n// Valid Settings (8|16|32|64|128)\n\n    \ngroup_bytes_by_bits\n \n:\n \n16\n,\n\n\n\n\n\n\nvalid_bytes_per_line\n\n\nSets the number of valid bytes that will be allowed for the \nvalid_bytes_per_line\n.  Keep in mind though that just be because a value is deemed valid here, there are still some restriction that are covered in \nbytes_per_line\n.\n\n\n    \n// These are the valid bytes per line options\n\n    \nvalid_bytes_per_line\n \n:\n \n[\n8\n,\n \n10\n,\n \n16\n,\n \n24\n,\n \n32\n,\n \n48\n,\n \n64\n,\n \n128\n,\n \n256\n,\n \n512\n],\n\n\n\n\n\n\nbytes_per_line\n\n\nNumber of bytes that will be shown on a line.  Can be any value found in \nvalid_bytes_per_line\n.  Even if the value is valid, there are some things to be aware of. HexViewer will default to a more reasonable value if the following does not hold true \nbytes_per_line / (group_bytes_by_bits / 8) == 0\n; if this does not hold true, there will be an adjustment made to the final number of bytes per line.\n\n\n    \n// Number of 8 bit bytes per line.\n\n    \n// See \nvalid_bytes_per_line\n for valid options\n\n    \nbytes_per_line\n \n:\n \n24\n,\n\n\n\n\n\n\nuse_lowercase_hex\n\n\nControls whether hex values are displayed with lowercase or uppercase characters.\n\n\n    \n// Use lowercase hex values.\n\n    \nuse_lowercase_hex\n:\n \ntrue\n,\n\n\n\n\n\n\ncustom_font\n\n\nSets the font used in a HexViewer view.  It is strongly recommended to set this to a monospaced font if your default font is not monospaced.\n\n\n    \n// Use None to use the current Sublime Text font.\n\n    \ncustom_font\n \n:\n \nnone\n,\n\n\n\n\n\n\ncustom_font_size\n\n\nSets the font size to be used in a HexViewer view.\n\n\n    \n// Use zero to use the current Sublime Text font size.\n\n    \ncustom_font_size\n \n:\n \n0\n,\n\n\n\n\n\n\ninspector\n\n\nSets whether the Hex Inspector panel is enabled.  To have the Hex Inspector panel auto-open when a HexViewer view loads, see \ninspector_auto_show\n.\n\n\n    \n// Show inspector panel\n\n    \ninspector\n \n:\n \ntrue\n,\n\n\n\n\n\n\ninspector_endian\n\n\nSets the endianness of the displayed values in the inspector.  The string value of \nbig\n and \nlittle\n can be used.\n\n\n    \n// endian? (big|little)\n\n    \ninspector_endian\n \n:\n \nbig\n,\n\n\n\n\n\n\ninspector_auto_show\n\n\nSets whether the Hex Inspector panel will auto-show on HexViewer view load.  If this is disabled, the Hex Inspector panel can still be shown manually when desired.\n\n\n    \n// Show inspector panel on hex view load and hide on hex view hide\n\n    \ninspector_auto_show\n \n:\n \ntrue\n,\n\n\n\n\n\n\ninspector_integer_format\n\n\nControls the text format for integer output in the inspector panel.  Uses standard python string formatting.\n\n\n   \n// Inspector format strings: ints and unsigned ints\n\n    \ninspector_integer_format\n:\n \n%-12s:  %-22d\n,\n\n\n\n\n\n\ninspector_float_format\n\n\nControls the text format for float output in the inspector panel.  Uses standard python string formatting.\n\n\n    \n// Inspector format strings: floating point decimals\n\n    \ninsepctor_float_format\n:\n \n%-12s:  %-22e\n,\n\n\n\n\n\n\ninspector_double_format\n\n\nControls the text format for double output in the inspector panel.  Uses standard python string formatting.\n\n\n    \n// Inspector format strings: double floating point decimal strings\n\n    \ninspector_double_format\n:\n \n%-12s:  %-22e\n,\n\n\n\n\n\n\ninspector_missing/bad_format\n\n\nControls the text format for missing/bad output in the inspector panel.  Uses standard python string formatting.\n\n\n    \n// Inspector format strings: \nNAN\n and not enough bytes to show numbers \n--\n\n    \ninspector_missing/bad_format\n:\n \n%-12s:  %-22s\n,\n\n\n\n\n\n\ninspector_binary_format\n\n\nControls the text format for binary output in the inspector panel.  Uses standard python string formatting.\n\n\n    \n// Binary number formatting\n\n    \ninspector_binary_format\n:\n \n%-12s:  %-22s\n\n\n\n\n\n\nenable_fake_hex_file\n\n\nWhen loading a file that is a HexViewer visual representation of a binary file, and the syntax is set to HexViewer\ns custom syntax, HexViewer will enable basic byte highlight features, Hex Inspector panel etc.\n\n\n    \n// Treat files in hex syntax with proper format\n\n    \n// (usually .hex files; saved versions of hex output)\n\n    \n// as real hex views.  The following functionality will be omitted:\n\n    \n// hex toggle, editing, writing to file,\n\n    \n// and dynamic changing of bits and bytes functionality.\n\n    \n// Address searching, Hex inspector, etc. should work fine.\n\n    \nenable_fake_hex_file\n:\n \ntrue\n,\n\n\n\n\n\n\nhighlight_max_bytes\n\n\nSets the max number of allowed bytes that HexViewer will highlight when selected.  This is a setting that limits the highlight for the sake of performance.  Keep this set to a reasonable value.\n\n\n    \n// Approximate max byte selection.\n\n    \n// The highlighter will highlight individual selections until\n\n    \n// the max number of bytes is found.  The selection containing\n\n    \n// the maximum byte will still be finished even if it has more\n\n    \n// bytes than the max.\n\n    \nhighlight_max_bytes\n \n:\n \n1000\n,\n\n\n\n\n\n\nprompt_on_file_too_big\n\n\nPrompts the user with a dialog that gives the user the option to bypass the default action.  By default HexViewer cancels rendering a hex view if the file is too big; or, if an external viewer is configured, HexViewer will open the binary file in the configured external viewer.  This option gives the user the ability to conditionally override the default action and render the hex viewer tab despite file size being too large.\n\n\n    \n// If the file is too large (as defined in the settings file via \nmax_file_size_kb\n),\n\n    \n// prompt the user with a dialog asking whether they would like to open the file internally anyways\n\n    \n// or use the default action (open in external viewer defined in \nexternal viewer\n or terminate action\n\n    \n// if \nexternal_viewer\n is not set or invalid).\n\n    \nprompt_on_file_too_big\n:\n \nfalse\n,\n\n\n\n\n\n\nhighlight_throttle\n\n\nSets whether \nhighlight_max_bytes\n will be used.  This allows a user to not limit the number of highlighted bytes.  It is not recommended to use this for performances sake.\n\n\n    \n//Enable highlight throttling\n\n    \nhighlight_throttle\n \n:\n \nfalse\n,\n\n\n\n\n\n\nhighlight_scope\n\n\nDefine the highlight color when a byte or ASCII char is selected.  Colors must be a scope found in your theme file, if not, the color will be the default font color.\n\n\n    \n// Scope? (Defined in theme files.)\n\n    \n// Examples: (keyword|string|number)\n\n    \nhighlight_scope\n \n:\n \nstring\n,\n\n\n\n\n\n\nhighlight_scope\n\n\nDefine the highlight color for bytes that have been edited.  Colors must be a scope found in your theme file, if not, the color will be the default font color.\n\n\n    \nhighlight_edit_scope\n:\n \nkeyword\n,\n\n\n\n\n\n\nhighlight_icon\n\n\nSets a gutter icon for highlighted bytes.  Default is set to the string \nnone\n to hide the icon.  This can be changed to either \ndot\n, \ncircle\n, \nbookmark\n, \ncross\n, or \nnone\n.\n\n\n    \n// Icon? (dot|circle|bookmark|cross|none)\n\n    \nhighlight_icon\n \n:\n \nnone\n,\n\n\n\n\n\n\nhighlight_edit_icon\n\n\nSets a gutter icon for edited bytes.  Default is set to the string \nnone\n to hide the icon.  This can be changed to either \ndot\n, \ncircle\n, \nbookmark\n, \ncross\n, \nnone\n.\n\n\n    \nhighlight_edit_icon\n \n:\n \nnone\n,\n\n\n\n\n\n\nhighlight_style\n\n\nSets the highlight style for highlighted bytes.  Can be \nsolid\n, \noutline\n, \nunderline\n, or \nnone\n.\n\n\n    \n// Style? (solid|outline|underline|none)\n\n    \nhighlight_style\n \n:\n \nsolid\n,\n\n\n\n\n\n\nhighlight_edit_style\n\n\nSets the highlight style for edited bytes.  Can be \nsolid\n, \noutline\n, \nunderline\n, or \nnone\n.\n\n\n    \nhighlight_edit_style\n \n:\n \nunderline\n,\n\n\n\n\n\n\nmax_file_size_kb\n\n\nSets a limit for how big of a binary file HexViewer will try and convert to a HexView.  Size is in Kilobytes.\n\n\n    \n// Maximum allowed byte size that HexViewer will parse\n\n    \nmax_file_size_kb\n:\n \n50000.0\n,\n\n\n\n\n\n\nexternal_viewer\n\n\nSometimes it may be desired to open a hex view in an external editor.  Due to the nature of the Sublime Text API, HexViewer\ns options and speed can be limited, so it can be advantageous to open a file in an external hex editor when performing certain actions or dealing with very large files.  \nexternal_viewer\n allows the configuring of the external hex editor.  \nexternal_viewer\n is a dictionary containing to parameters.  \nviewer\n, which is an absolute path to the the external hex editor.  \nargs\n are the arguments that will be passed to the external editor; it is an array of string arguments.  You can use \n${FILE}\n has a place holder for the file path that will be sent to the editor.  HexViewer will insert the actual file path in the place of \n${FILE}\n.\n\n\n    \n// External Hex Viewer if max size is exceeded.\n\n    \n// Viewer should be the absolute path.\n\n    \n// Args is an array of command line arguments. Use ${FILE} for the file path.\n\n    \nexternal_viewer\n:\n \n{\n\n        \nviewer\n:\n \n,\n\n        \nargs\n:\n \n[\n${FILE}\n]\n\n    \n},\n\n\n\n\n\n\nhash_algorithm\n\n\nThe default checksum algorithm to use when creating a hash or checksum (not all values listed below will be found on every platform and system).\n\n\n    \n// Checksum algorithm default? (the default is what is applied to a file when saving)\n\n    \n// (mdc2|md4|md5|sha|sha1|sha224|sha256|sha384|sha512|ripemd160|crc32|adler32)\n\n    \nhash_algorithm\n \n:\n \nmd5\n,\n\n\n\n\n\n\nchecksum_on_save\n\n\nControls whether HexViewer will checksum the binary file on save/export.\n\n\n    \n// Enable checksum on save\n\n    \nchecksum_on_save\n \n:\n \ntrue\n,\n\n\n\n\n\n\nauto_open\n\n\nSets whether HexViewer should auto detect binary files and convert them to HexViewer views.  When enabled, HexViewer will detect when a view is set to the \nHexidecimal\n syntax, or if the file name matches the \nauto_open_patterns\n found below.\n\n\n    \n// Auto open binary files in hex viewer\n\n    \n// Detects if view has encoding set to \nHexidecimal\n.\n\n    \n// Additionally it can use \nauto_open_patterns\n below.\n\n    \nauto_open\n \n:\n \nfalse\n,\n\n\n\n\n\n\nauto_open_patterns\n\n\nWhen \nauto_open\n is enabled, HexViewer will use the following list of file patterns to detect binary files for auto conversion.\n\n\n    \n// Auto open patterns to open in hex viewer\n\n    \nauto_open_patterns\n \n:\n \n[\n*.bin\n,\n \n*.pyc\n],\n\n\n\n\n\n\ndisable_auto_open_hex_encoding\n\n\nSets whether \nauto_open\n will convert views with the \nHexidecimal\n syntax.\n\n\n    \n// Disable auto open based on \nHexidecimal\n encoding\n\n    \ndisable_auto_open_hex_encoding\n:\n \nfalse\n,\n\n\n\n\n\n\nuse_sub_notify\n\n\nEnables use of \nSubNotify\n notifications.\n\n\n    \n// Use sub notify if available\n\n    \nuse_sub_notify\n:\n \ntrue\n,", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuring and using HexViewer.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#commands", 
            "text": "There are 10 commands available via the command palette or by key-bindings.   Hex Viewer: Toggle Hex View  Hex Viewer: Show Hex Inspector  Hex Viewer: Toggle Endianness (Big|Little)  Hex Viewer: Set Bits Per Group  Hex Viewer: Set Bytes Per Line  Hex Viewer: Go to Offset  Hex Viewer: Show Hex Edit Panel  Hex Viewer: Discard All Edits  Hex Viewer: Export Bin  Hex Viewer: Get Checksum  Hex Viewer: Generate Hash", 
            "title": "Commands"
        }, 
        {
            "location": "/usage/#hex-viewer-toggle-hex-view", 
            "text": "Toggles file in or out of hex view.", 
            "title": "Hex Viewer: Toggle Hex View"
        }, 
        {
            "location": "/usage/#hex-viewer-reload-hex-view", 
            "text": "Reloads the current hex view.  All edits will be lost.", 
            "title": "Hex Viewer: Reload Hex View"
        }, 
        {
            "location": "/usage/#hex-viewer-show-hex-inspector", 
            "text": "Show the Hex Inspector panel.  The Hex Inspector is a panel which shows the current selected byte as different unit types.     Name  Signed  Bits      Byte  Unsigned  8    Short  Signed  8    Word  Unsigned  16    Int  Signed  16    Dword  Unsigned  32    LongInt  Signed  32    Qword  Unsinged  64    LongLongInt  Signed  64    Float  Signed  32    Double  Signed  64    Binary  NA  8", 
            "title": "Hex Viewer: Show Hex Inspector"
        }, 
        {
            "location": "/usage/#hex-viewer-toggle-endiannes-biglittle", 
            "text": "Toggles the parsing of bytes to big or little endian when showing unit types in Hex Inspector.", 
            "title": "Hex Viewer: Toggle Endiannes (Big|Little)"
        }, 
        {
            "location": "/usage/#hex-viewer-set-bits-per-group", 
            "text": "Allows selection from the quick panel the grouping of bytes by 8, 16, 32, 64, and 128 bits.  This will reload the file with this formatting.  All edits will be lost, so export your changes before you do this.", 
            "title": "Hex Viewer: Set Bits Per Group"
        }, 
        {
            "location": "/usage/#hex-viewer-set-bytes-per-line", 
            "text": "Allows selection from the quick panel the number of bytes to be shown on a line (allowed options are defined in  valid_bytes_per_line ).", 
            "title": "Hex Viewer: Set Bytes Per Line"
        }, 
        {
            "location": "/usage/#hex-viewer-go-to-offset", 
            "text": "Moves the cursor to the given offset (address).  Input is received through the input panel.", 
            "title": "Hex Viewer: Go to Offset"
        }, 
        {
            "location": "/usage/#hex-viewer-show-hex-edit-panel", 
            "text": "Invoking this command will take the currently selected bytes on a line and display them in an input panel.  They can then be modified and submitted to replace the original bytes.  Strings can also be used by using the  s:  prefix followed by the equivalent ASCII characters that are to replace the selected bytes.", 
            "title": "Hex Viewer: Show Hex Edit Panel"
        }, 
        {
            "location": "/usage/#hex-viewer-discard-all-edits", 
            "text": "If at any time you would like to discard all of the changes you have currently made to the hex view, you can invoke this command and a clean hex view will be reloaded.", 
            "title": "Hex Viewer: Discard All Edits"
        }, 
        {
            "location": "/usage/#hex-viewer-export-bin", 
            "text": "Exports the current hex view to a binary file.", 
            "title": "Hex Viewer: Export Bin"
        }, 
        {
            "location": "/usage/#hex-viewer-run-checksum", 
            "text": "By default, it opens up a quick panel with all available hashes that can be used as a checksum.  When an algorithm is selected, it is used to retrieve the checksum for the current file in hex view mode.", 
            "title": "Hex Viewer: Run Checksum"
        }, 
        {
            "location": "/usage/#hex-viewer-generate-hash", 
            "text": "Shows a quick panel allowing you to select the desired hash, and then shows an input panel that allows you to specify the string to be hashed. A panel is then displayed with your generated hash according to the selected specifications.", 
            "title": "Hex Viewer: Generate Hash"
        }, 
        {
            "location": "/usage/#hex-viewer-generate-hash-from-selection", 
            "text": "Allows you to generate hashes from your current selection(s).  Multi-select regions  content will be combined and evaluated together.  If a region contains newlines, they will be hashed as well.", 
            "title": "Hex Viewer: Generate Hash from Selection"
        }, 
        {
            "location": "/usage/#hex-viewer-abort-hex-conversionexportchecksum", 
            "text": "Abort the given action.", 
            "title": "Hex Viewer: Abort (Hex Conversion|Export|Checksum)"
        }, 
        {
            "location": "/usage/#hex-viewer-open-in-external-viewer", 
            "text": "Opens the current binary file in an external hex editor.", 
            "title": "Hex Viewer: Open in External Viewer"
        }, 
        {
            "location": "/usage/#configurable-settings", 
            "text": "Settings are configurable in the  hex_viewer.sublime-settings  file.", 
            "title": "Configurable settings"
        }, 
        {
            "location": "/usage/#group_bytes_by_bits", 
            "text": "Groups together the bytes by the number of bits.  Valid numbers are must be divisible by bytes and currently go up to 128 bits.       // Group bytes together by bits \n     // Valid Settings (8|16|32|64|128) \n     group_bytes_by_bits   :   16 ,", 
            "title": "group_bytes_by_bits"
        }, 
        {
            "location": "/usage/#valid_bytes_per_line", 
            "text": "Sets the number of valid bytes that will be allowed for the  valid_bytes_per_line .  Keep in mind though that just be because a value is deemed valid here, there are still some restriction that are covered in  bytes_per_line .       // These are the valid bytes per line options \n     valid_bytes_per_line   :   [ 8 ,   10 ,   16 ,   24 ,   32 ,   48 ,   64 ,   128 ,   256 ,   512 ],", 
            "title": "valid_bytes_per_line"
        }, 
        {
            "location": "/usage/#bytes_per_line", 
            "text": "Number of bytes that will be shown on a line.  Can be any value found in  valid_bytes_per_line .  Even if the value is valid, there are some things to be aware of. HexViewer will default to a more reasonable value if the following does not hold true  bytes_per_line / (group_bytes_by_bits / 8) == 0 ; if this does not hold true, there will be an adjustment made to the final number of bytes per line.       // Number of 8 bit bytes per line. \n     // See  valid_bytes_per_line  for valid options \n     bytes_per_line   :   24 ,", 
            "title": "bytes_per_line"
        }, 
        {
            "location": "/usage/#use_lowercase_hex", 
            "text": "Controls whether hex values are displayed with lowercase or uppercase characters.       // Use lowercase hex values. \n     use_lowercase_hex :   true ,", 
            "title": "use_lowercase_hex"
        }, 
        {
            "location": "/usage/#custom_font", 
            "text": "Sets the font used in a HexViewer view.  It is strongly recommended to set this to a monospaced font if your default font is not monospaced.       // Use None to use the current Sublime Text font. \n     custom_font   :   none ,", 
            "title": "custom_font"
        }, 
        {
            "location": "/usage/#custom_font_size", 
            "text": "Sets the font size to be used in a HexViewer view.       // Use zero to use the current Sublime Text font size. \n     custom_font_size   :   0 ,", 
            "title": "custom_font_size"
        }, 
        {
            "location": "/usage/#inspector", 
            "text": "Sets whether the Hex Inspector panel is enabled.  To have the Hex Inspector panel auto-open when a HexViewer view loads, see  inspector_auto_show .       // Show inspector panel \n     inspector   :   true ,", 
            "title": "inspector"
        }, 
        {
            "location": "/usage/#inspector_endian", 
            "text": "Sets the endianness of the displayed values in the inspector.  The string value of  big  and  little  can be used.       // endian? (big|little) \n     inspector_endian   :   big ,", 
            "title": "inspector_endian"
        }, 
        {
            "location": "/usage/#inspector_auto_show", 
            "text": "Sets whether the Hex Inspector panel will auto-show on HexViewer view load.  If this is disabled, the Hex Inspector panel can still be shown manually when desired.       // Show inspector panel on hex view load and hide on hex view hide \n     inspector_auto_show   :   true ,", 
            "title": "inspector_auto_show"
        }, 
        {
            "location": "/usage/#inspector_integer_format", 
            "text": "Controls the text format for integer output in the inspector panel.  Uses standard python string formatting.      // Inspector format strings: ints and unsigned ints \n     inspector_integer_format :   %-12s:  %-22d ,", 
            "title": "inspector_integer_format"
        }, 
        {
            "location": "/usage/#inspector_float_format", 
            "text": "Controls the text format for float output in the inspector panel.  Uses standard python string formatting.       // Inspector format strings: floating point decimals \n     insepctor_float_format :   %-12s:  %-22e ,", 
            "title": "inspector_float_format"
        }, 
        {
            "location": "/usage/#inspector_double_format", 
            "text": "Controls the text format for double output in the inspector panel.  Uses standard python string formatting.       // Inspector format strings: double floating point decimal strings \n     inspector_double_format :   %-12s:  %-22e ,", 
            "title": "inspector_double_format"
        }, 
        {
            "location": "/usage/#inspector_missingbad_format", 
            "text": "Controls the text format for missing/bad output in the inspector panel.  Uses standard python string formatting.       // Inspector format strings:  NAN  and not enough bytes to show numbers  -- \n     inspector_missing/bad_format :   %-12s:  %-22s ,", 
            "title": "inspector_missing/bad_format"
        }, 
        {
            "location": "/usage/#inspector_binary_format", 
            "text": "Controls the text format for binary output in the inspector panel.  Uses standard python string formatting.       // Binary number formatting \n     inspector_binary_format :   %-12s:  %-22s", 
            "title": "inspector_binary_format"
        }, 
        {
            "location": "/usage/#enable_fake_hex_file", 
            "text": "When loading a file that is a HexViewer visual representation of a binary file, and the syntax is set to HexViewer s custom syntax, HexViewer will enable basic byte highlight features, Hex Inspector panel etc.       // Treat files in hex syntax with proper format \n     // (usually .hex files; saved versions of hex output) \n     // as real hex views.  The following functionality will be omitted: \n     // hex toggle, editing, writing to file, \n     // and dynamic changing of bits and bytes functionality. \n     // Address searching, Hex inspector, etc. should work fine. \n     enable_fake_hex_file :   true ,", 
            "title": "enable_fake_hex_file"
        }, 
        {
            "location": "/usage/#highlight_max_bytes", 
            "text": "Sets the max number of allowed bytes that HexViewer will highlight when selected.  This is a setting that limits the highlight for the sake of performance.  Keep this set to a reasonable value.       // Approximate max byte selection. \n     // The highlighter will highlight individual selections until \n     // the max number of bytes is found.  The selection containing \n     // the maximum byte will still be finished even if it has more \n     // bytes than the max. \n     highlight_max_bytes   :   1000 ,", 
            "title": "highlight_max_bytes"
        }, 
        {
            "location": "/usage/#prompt_on_file_too_big", 
            "text": "Prompts the user with a dialog that gives the user the option to bypass the default action.  By default HexViewer cancels rendering a hex view if the file is too big; or, if an external viewer is configured, HexViewer will open the binary file in the configured external viewer.  This option gives the user the ability to conditionally override the default action and render the hex viewer tab despite file size being too large.       // If the file is too large (as defined in the settings file via  max_file_size_kb ), \n     // prompt the user with a dialog asking whether they would like to open the file internally anyways \n     // or use the default action (open in external viewer defined in  external viewer  or terminate action \n     // if  external_viewer  is not set or invalid). \n     prompt_on_file_too_big :   false ,", 
            "title": "prompt_on_file_too_big"
        }, 
        {
            "location": "/usage/#highlight_throttle", 
            "text": "Sets whether  highlight_max_bytes  will be used.  This allows a user to not limit the number of highlighted bytes.  It is not recommended to use this for performances sake.       //Enable highlight throttling \n     highlight_throttle   :   false ,", 
            "title": "highlight_throttle"
        }, 
        {
            "location": "/usage/#highlight_scope", 
            "text": "Define the highlight color when a byte or ASCII char is selected.  Colors must be a scope found in your theme file, if not, the color will be the default font color.       // Scope? (Defined in theme files.) \n     // Examples: (keyword|string|number) \n     highlight_scope   :   string ,", 
            "title": "highlight_scope"
        }, 
        {
            "location": "/usage/#highlight_scope_1", 
            "text": "Define the highlight color for bytes that have been edited.  Colors must be a scope found in your theme file, if not, the color will be the default font color.       highlight_edit_scope :   keyword ,", 
            "title": "highlight_scope"
        }, 
        {
            "location": "/usage/#highlight_icon", 
            "text": "Sets a gutter icon for highlighted bytes.  Default is set to the string  none  to hide the icon.  This can be changed to either  dot ,  circle ,  bookmark ,  cross , or  none .       // Icon? (dot|circle|bookmark|cross|none) \n     highlight_icon   :   none ,", 
            "title": "highlight_icon"
        }, 
        {
            "location": "/usage/#highlight_edit_icon", 
            "text": "Sets a gutter icon for edited bytes.  Default is set to the string  none  to hide the icon.  This can be changed to either  dot ,  circle ,  bookmark ,  cross ,  none .       highlight_edit_icon   :   none ,", 
            "title": "highlight_edit_icon"
        }, 
        {
            "location": "/usage/#highlight_style", 
            "text": "Sets the highlight style for highlighted bytes.  Can be  solid ,  outline ,  underline , or  none .       // Style? (solid|outline|underline|none) \n     highlight_style   :   solid ,", 
            "title": "highlight_style"
        }, 
        {
            "location": "/usage/#highlight_edit_style", 
            "text": "Sets the highlight style for edited bytes.  Can be  solid ,  outline ,  underline , or  none .       highlight_edit_style   :   underline ,", 
            "title": "highlight_edit_style"
        }, 
        {
            "location": "/usage/#max_file_size_kb", 
            "text": "Sets a limit for how big of a binary file HexViewer will try and convert to a HexView.  Size is in Kilobytes.       // Maximum allowed byte size that HexViewer will parse \n     max_file_size_kb :   50000.0 ,", 
            "title": "max_file_size_kb"
        }, 
        {
            "location": "/usage/#external_viewer", 
            "text": "Sometimes it may be desired to open a hex view in an external editor.  Due to the nature of the Sublime Text API, HexViewer s options and speed can be limited, so it can be advantageous to open a file in an external hex editor when performing certain actions or dealing with very large files.   external_viewer  allows the configuring of the external hex editor.   external_viewer  is a dictionary containing to parameters.   viewer , which is an absolute path to the the external hex editor.   args  are the arguments that will be passed to the external editor; it is an array of string arguments.  You can use  ${FILE}  has a place holder for the file path that will be sent to the editor.  HexViewer will insert the actual file path in the place of  ${FILE} .       // External Hex Viewer if max size is exceeded. \n     // Viewer should be the absolute path. \n     // Args is an array of command line arguments. Use ${FILE} for the file path. \n     external_viewer :   { \n         viewer :   , \n         args :   [ ${FILE} ] \n     },", 
            "title": "external_viewer"
        }, 
        {
            "location": "/usage/#hash_algorithm", 
            "text": "The default checksum algorithm to use when creating a hash or checksum (not all values listed below will be found on every platform and system).       // Checksum algorithm default? (the default is what is applied to a file when saving) \n     // (mdc2|md4|md5|sha|sha1|sha224|sha256|sha384|sha512|ripemd160|crc32|adler32) \n     hash_algorithm   :   md5 ,", 
            "title": "hash_algorithm"
        }, 
        {
            "location": "/usage/#checksum_on_save", 
            "text": "Controls whether HexViewer will checksum the binary file on save/export.       // Enable checksum on save \n     checksum_on_save   :   true ,", 
            "title": "checksum_on_save"
        }, 
        {
            "location": "/usage/#auto_open", 
            "text": "Sets whether HexViewer should auto detect binary files and convert them to HexViewer views.  When enabled, HexViewer will detect when a view is set to the  Hexidecimal  syntax, or if the file name matches the  auto_open_patterns  found below.       // Auto open binary files in hex viewer \n     // Detects if view has encoding set to  Hexidecimal . \n     // Additionally it can use  auto_open_patterns  below. \n     auto_open   :   false ,", 
            "title": "auto_open"
        }, 
        {
            "location": "/usage/#auto_open_patterns", 
            "text": "When  auto_open  is enabled, HexViewer will use the following list of file patterns to detect binary files for auto conversion.       // Auto open patterns to open in hex viewer \n     auto_open_patterns   :   [ *.bin ,   *.pyc ],", 
            "title": "auto_open_patterns"
        }, 
        {
            "location": "/usage/#disable_auto_open_hex_encoding", 
            "text": "Sets whether  auto_open  will convert views with the  Hexidecimal  syntax.       // Disable auto open based on  Hexidecimal  encoding \n     disable_auto_open_hex_encoding :   false ,", 
            "title": "disable_auto_open_hex_encoding"
        }, 
        {
            "location": "/usage/#use_sub_notify", 
            "text": "Enables use of  SubNotify  notifications.       // Use sub notify if available \n     use_sub_notify :   true ,", 
            "title": "use_sub_notify"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n=\nversion\nST3\n\n\nSupported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than \nST3\n will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull \nmust\n already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8_docstrings\n, \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2 = version ST3  Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than  ST3  will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull  must  already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.    ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8 ,  flake8_docstrings ,  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nHex Viewer is released under the MIT license.\n\n\nCopyright \n 2011 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Hex Viewer is released under the MIT license.  Copyright   2011 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}